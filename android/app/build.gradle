def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "dev.hrishikesh_kadam.flutter.space_data_explorer"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['releaseStoreFile'])
            storePassword keystoreProperties['releaseStoreAndKeyPassword']
            keyAlias keystoreProperties['releaseKeyAlias']
            keyPassword keystoreProperties['releaseStoreAndKeyPassword']
        }
        nonRelease {
            storeFile file(keystoreProperties['nonReleaseStoreFile'])
            storePassword keystoreProperties['nonReleaseStoreAndKeyPassword']
            keyAlias keystoreProperties['nonReleaseKeyAlias']
            keyPassword keystoreProperties['nonReleaseStoreAndKeyPassword']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            signingConfig signingConfigs.nonRelease
        }
        profile {
            applicationIdSuffix ".profile"
            versionNameSuffix "-profile"
            signingConfig signingConfigs.nonRelease
        }
        release {
            applicationIdSuffix ".release"
            versionNameSuffix "-release"
        }
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            dimension "env"
            manifestPlaceholders = [hostName:"space-data-explorer-dev.web.app"]
            applicationIdSuffix ".dev"
            versionNameSuffix "-dev"
            signingConfig signingConfigs.nonRelease
        }
        stag {
            dimension "env"
            manifestPlaceholders = [hostName:"space-data-explorer-stag.web.app"]
            applicationIdSuffix ".stag"
            versionNameSuffix "-stag"
            signingConfig signingConfigs.nonRelease
        }
        prod {
            dimension "env"
            manifestPlaceholders = [hostName:"space-data-explorer.web.app"]
            applicationIdSuffix ".prod"
            versionNameSuffix "-prod"
            signingConfig signingConfigs.release
        }
    }

    applicationVariants.all { variant ->
        if (variant.applicationId.contains("prod") && variant.applicationId.contains("release")) {
            variant.mergedFlavor.applicationId android.defaultConfig.applicationId
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task("printAllVariants") {
    android.applicationVariants.all { variant ->
        println variant.applicationId
    }
}
