plugins {
    id 'com.android.application'
    id 'kotlin-android'
    // https://github.com/flutter/flutter/blob/stable/packages/flutter_tools/gradle/src/main/groovy/flutter.groovy
    id 'dev.flutter.flutter-gradle-plugin'
}

apply from: '../constants.gradle'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('../secrets/android/key.properties')
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace 'dev.hrishikesh_kadam.flutter.space_data_explorer'
    compileSdk flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId constants.applicationId
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        multiDexEnabled true
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        manifestPlaceholders += [ applicationLabel:constants.appName ]
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    signingConfigs {
        if (keyPropertiesFile.exists()) {
            prod {
                storeFile file(keyProperties['prodStoreFile'])
                storePassword keyProperties['prodStoreAndKeyPassword']
                keyAlias keyProperties['prodKeyAlias']
                keyPassword keyProperties['prodStoreAndKeyPassword']
            }
            nonProd {
                storeFile file(keyProperties['nonProdStoreFile'])
                storePassword keyProperties['nonProdStoreAndKeyPassword']
                keyAlias keyProperties['nonProdKeyAlias']
                keyPassword keyProperties['nonProdStoreAndKeyPassword']
            }
        }
    }

    buildTypes {
        debug {
            // applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
            if (keyPropertiesFile.exists()) {
                signingConfig null
            } else {
                signingConfig signingConfigs.debug
            }
        }
        profile {
            // applicationIdSuffix '.profile'
            versionNameSuffix '-profile'
            if (keyPropertiesFile.exists()) {
                signingConfig null
            } else {
                signingConfig signingConfigs.debug
            }
        }
        release {
            // applicationIdSuffix '.release'
            versionNameSuffix '-release'
            if (keyPropertiesFile.exists()) {
                signingConfig null
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }

    flavorDimensions 'env'
    productFlavors {
        dev {
            dimension 'env'
            manifestPlaceholders = [ hostName:constants.devHostName ]
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonProd
            }
        }
        stag {
            dimension 'env'
            manifestPlaceholders = [ hostName:constants.stagHostName ]
            applicationIdSuffix '.stag'
            versionNameSuffix '-stag'
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.nonProd
            }
        }
        prod {
            dimension 'env'
            manifestPlaceholders = [ hostName:constants.prodHostName ]
            // applicationIdSuffix '.prod'
            versionNameSuffix '-prod'
            if (keyPropertiesFile.exists()) {
                signingConfig signingConfigs.prod
            }
        }
    }
}

// https://developer.android.com/build/extend-agp#variant-api-artifacts-tasks
// https://developer.android.com/build/build-variants#filter-variants
// https://developer.android.com/reference/tools/gradle-api/7.4/com/android/build/api/variant/AndroidComponentsExtension
androidComponents {
    def all = selector().all()
    onVariants(all) { variant ->
        if (variant.flavorName == 'prod' && variant.buildType == 'release') {
            // https://android.googlesource.com/platform/tools/base/+/studio-main/build-system/gradle-core/src/main/java/com/android/build/api/component/analytics/AnalyticsEnabledApplicationVariant.kt
            // variant.applicationId.set(android.defaultConfig.applicationId)
            variant.outputs.each { output ->
                // https://android.googlesource.com/platform/tools/base/+/studio-master-dev/build-system/gradle-core/src/main/java/com/android/build/api/variant/impl/VariantOutputImpl.kt
                def defaultVersionName = android.defaultConfig.versionName
                if (output.versionName.get() == defaultVersionName + '-prod-release') {
                    output.versionName.set(android.defaultConfig.versionName)
                }
            }
        }
        // variant.outputs.each { output ->
        //     output.outputFileName.set(constants.appNameSnakeCase + '-' + output.versionName.get() + '.apk')
        // }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation 'androidx.multidex:multidex:2.0.1'
    // Source - https://github.com/flutter/flutter/tree/main/packages/integration_test#android-device-testing
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

task('printAllVariants') {
    doLast {
        println 'applicationId,versionNameSuffix,signingConfig.keyAlias'
        // https://developer.android.com/build/gradle-tips#create-different-versions-of-your-app
        android.applicationVariants.all { variant ->
            def defaultVersionName = android.defaultConfig.versionName
            def versionNameSuffix = variant.versionName.replaceFirst("^$defaultVersionName", '')
            println variant.applicationId + ',' \
                + versionNameSuffix + ',' \
                + variant.signingConfig.keyAlias
        }
    }
}

task('getApplicationId') {
    doLast {
        android.applicationVariants.all { variant ->
            if (variant.name == variantName) {
                print variant.applicationId
                return
            }
        }
    }
}

// TODO(hrishikesh-kadam): Remove this once the following issue is resolved.
// https://github.com/flutter/flutter/issues/88005
project.gradle.startParameter.excludedTaskNames.add(':integration_test:lintDebug')

// https://firebase.google.com/docs/crashlytics/get-deobfuscated-reports?platform=flutter#android
// This section must appear at the bottom of the file
// apply plugin: 'com.google.gms.google-services'
// apply plugin: 'com.google.firebase.crashlytics'
